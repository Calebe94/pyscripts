#Copyright (C) 2021 TinyTools

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/bash

note_metadata="---\ntitle: %s\nsubtitle: %s\ndate: %s\ntags: [%s]\n\n---"
note=""
new_note=""
notes_path=""
action=""

delete_note()
{
    rm "$note"
}

rename_note()
{
    mv "$note" "$new_note"
}

add_note()
{
    echo "creating note..."
    path=$(dirname $note)
    note_name=$(basename $note)
    [ -f "$note" ] && echo "note already exists!" && exit 1
    [ -d "$path" ] || mkdir "$path"
    echo "# $note_name" > "$note"

    echo "$note_name created!"
}

list_notes()
{
    find "$notes_path" -type f -follow -print
}

usage()
{
    echo "usage:"
    exit 0
}

parse_arguments()
{
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -a | --add | add )
                [ -z "$action" ] && action="add"
                [ ! -z "$2" ] && [ -z "$note" ] && note="$2";
                shift ;;
            -d | --delete | delete )
                [ -z "$action" ] && action="delete"
                [ ! -z "$2" ] && [ -z "$note" ] && note="$2";
                shift ;;
            -r | --rename | rename ) 
                [ -z "$action" ] && action="rename"
                [ ! -z "$2" ] && [ -z "$note" ] && note="$2";
                [ ! -z "$3" ] && [ -z "$new_note" ] && new_note="$3";
                shift ;;
            -s | --subtitle | subtitle ) subtitle="$2"; shift ;;
            -p | --path | path ) notes_path="$2"; shift ;;
            -l | --list | list ) action="list"; shift ;;
           -h | --help | help)
                usage 
                shift ;;
            -*) echo "unknown option: $1" >&2; exit 1;;
            *) # preserve positional arguments
               PARAMS="$PARAMS $1"
               shift ;;
            *) usage; shift ;;
        esac
    done
}

arguments="$@"
[ -z "$arguments" ] && usage || parse_arguments "$@"

eval set -- "$PARAMS"

shift $(expr $OPTIND - 1 )

while test $# -gt 0; do [ -d "$1" ] &&  notes_path="$1";shift; done

case "$action" in
    "add") add_note ;;
    "list") list_notes ;;
    "delete") delete_note ;;
    "rename") rename_note ;;
    *) usage;;
esac

