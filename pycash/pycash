#!/usr/bin/python

import argparse
import datetime
import os
import json

PYCASH_CONFIG_FILE = os.path.join(
    os.getenv("HOME"), ".config", "pycash-config.json")
PYCASH_CONFIG = {
    "file_path": os.path.join(os.getenv("HOME"), '.pycash'),
    "currency": "$"
}

DEFAULT_CSV_COLUMNS = "Type;Amount;Date;Description;Account;Category"


def update_config():
    if os.path.isfile(PYCASH_CONFIG_FILE):
        print("Consuming config from {}".format(PYCASH_CONFIG_FILE))
        with open(PYCASH_CONFIG_FILE, 'r') as config_file:
            PYCASH_CONFIG = json.load(config_file)
    else:
        print("{} file does't exists!".format(PYCASH_CONFIG_FILE))


def get_file(arg_file):
    now = datetime.datetime.now()
    year = now.year
    month = now.month

    record_file = str()

    if arg_file == None:
        record_file = os.path.join(
            PYCASH_CONFIG['file_path'],
            str(year),
            '{}_{}.csv'.format(month, str(now.strftime("%B")).lower()))

        if os.path.isdir(os.path.join(PYCASH_CONFIG['file_path'], str(year))) == False:
            os.makedirs(os.path.join(PYCASH_CONFIG['file_path'], str(year)))

        if os.path.isfile(record_file) == False:
            print("Creating {} file".format(record_file))
            with open(os.path.join(record_file), 'w') as record_file:
                record_file.write(DEFAULT_CSV_COLUMNS)
    else:
        record_file = arg_file
        print("Checking {} file".format(record_file))
        if not os.path.isfile(arg_file) == False:
            with open(os.path.join(record_file), 'w') as record_file:
                record_file.write(DEFAULT_CSV_COLUMNS)

    return record_file


def get_date(arg_date):
    if arg_date == "today":
        date = datetime.datetime.now().strftime('%Y-%m-%d')
    elif arg_date == "yesterday":
        yesterday = datetime.date.today() - datetime.timedelta(days=1)
        date = yesterday.strftime('%Y-%m-%d')
    elif arg_date == "tomorrow":
        tomorrow = datetime.date.today() + datetime.timedelta(days=1)
        date = tomorrow.strftime('%Y-%m-%d')
    elif arg_date == None:
        date = datetime.datetime.now().strftime('%Y-%m-%d')
    else:
        date = arg_date

    return date


def cli_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('-in', '--incoming', dest='type', action='store_const',
                        const='incoming', required=False)
    parser.add_argument('-out', '--outcoming', dest='type', action='store_const',
                        const='outcoming', required=False)
    parser.add_argument('--init', required=False, help="init")
    parser.add_argument('-r', '--raw', required=False, help="raw")
    parser.add_argument('--value', required=True, help="value")
    parser.add_argument('--date', required=False, help="date")
    parser.add_argument('--account', required=False, help="account")
    parser.add_argument('--category', required=False, help="category")
    parser.add_argument('--file', required=False, help="file")
    parser.add_argument('-desc', '--description',
                        required=False, help="description")
    args = parser.parse_args()
    update_config()
    if args.type:
        type = args.type
        value = args.value
        date = get_date(args.date)
        description = args.description
        account = args.account
        category = args.category if args.category != None else "Other"
        finance_file = get_file(args.file)
        print("Type;Amount;Date;Description;Account;Category")
        print(type, value, date, description, account, category)


def main():
    cli_arguments()


if __name__ == "__main__":
    main()
