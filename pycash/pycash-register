#!/usr/bin/python

import argparse
import datetime
import os
import json
import logging
import csv
import re

PYCASH_CONFIG_FILE = os.path.join(
    os.getenv("HOME"), ".config", "pycash-config.json")

# Default configuration
PYCASH_CONFIG = {
    "file_path": os.path.join(os.getenv("HOME"), '.pycash'),
    "currency": "$",
    "date_format": '%Y-%m-%d'
}

DEFAULT_CSV_COLUMNS = "Type;Amount;Description;Date;Account;Category\n"

# subtitle:  type; currency value; description; date; account; category
LINE_ENTRY = "{}; {}; {}; {}; {}; {}"


def update_config():
    status = False
    AUX_PYCASH_CONFIG = dict()
    if os.path.isfile(PYCASH_CONFIG_FILE):
        logging.info("Consuming config from {}".format(PYCASH_CONFIG_FILE))
        with open(PYCASH_CONFIG_FILE, 'r') as config_file:
            AUX_PYCASH_CONFIG = json.load(config_file)

        diff_values = set(AUX_PYCASH_CONFIG.items())-set(PYCASH_CONFIG.items())
        for value in diff_values:
            PYCASH_CONFIG[value[0]] = value[1]

        logging.info("Configuration values {}".format(str(PYCASH_CONFIG)))

        status = True
    else:
        logging.error("{} file does't exists!".format(PYCASH_CONFIG_FILE))

    return status


def get_file(arg_file):
    now = datetime.datetime.now()
    year = now.year
    month = now.month

    record_file_path = str()

    if arg_file == None:
        record_file_path = os.path.join(
            PYCASH_CONFIG['file_path'],
            str(year),
            '{}_{}.csv'.format(month, str(now.strftime("%B")).lower()))

        if os.path.isdir(os.path.join(PYCASH_CONFIG['file_path'], str(year))) == False:
            os.makedirs(os.path.join(PYCASH_CONFIG['file_path'], str(year)))

        if os.path.isfile(record_file_path) == False:
            logging.info("Creating {} file".format(record_file_path))
            with open(os.path.join(record_file_path), 'w') as record_file:
                record_file.write(DEFAULT_CSV_COLUMNS)
    else:
        record_file_path = arg_file
        logging.info("Checking {} file".format(record_file_path))
        if not os.path.isfile(arg_file) == False:
            with open(os.path.join(record_file_path), 'w') as record_file:
                record_file.write(DEFAULT_CSV_COLUMNS)

    return record_file_path


def validate_date(date_string):
    status = False
    try:
        datetime.datetime.strptime(date_string, PYCASH_CONFIG["date_format"])
        status = True
    except Exception as exception:
        logging.error("Incorrect data format, should be YYYY-MM-DD")

    return status


def get_date(arg_date):
    if arg_date == "today":
        date = datetime.datetime.now().strftime(PYCASH_CONFIG["date_format"])
    elif arg_date == "yesterday":
        yesterday = datetime.date.today() - datetime.timedelta(days=1)
        date = yesterday.strftime(PYCASH_CONFIG["date_format"])
    elif arg_date == "tomorrow":
        tomorrow = datetime.date.today() + datetime.timedelta(days=1)
        date = tomorrow.strftime(PYCASH_CONFIG["date_format"])
    elif arg_date == None:
        date = datetime.datetime.now().strftime(PYCASH_CONFIG["date_format"])
    elif validate_date(arg_date) == False:
        date = datetime.datetime.now().strftime(PYCASH_CONFIG["date_format"])
    else:
        date = arg_date

    return date


def get_category(category):

    return category if category != None else "Other"


def get_value_from_raw_entry(raw_splitted):
    value = str(0)
    try:  # Try to access the index
        value = raw_splitted[0].strip()
    except Exception as identifier:
        # If an exception was raised, get the default value(0)
        logging.error(identifier)

    return value


def get_description_from_raw_entry(raw_splitted):
    description = str("")
    try:  # Try to access the index
        description = raw_splitted[1].strip()
    except Exception as identifier:
        # If an exception was raised, get the default description(empty)
        logging.error(identifier)

    return description


def get_date_from_raw_entry(raw_splitted):
    date = str(0)
    try:  # Try to access the index
        date = get_date(str(raw_splitted[2]).strip())
    except Exception as identifier:
        # If an exception was raised, get the default data(today)
        date = get_date(date)
        logging.error(identifier)

    return date


def get_account_from_raw_entry(raw_splitted):
    account = str("")
    try:  # Try to access the index
        account = raw_splitted[3].strip()
    except Exception as identifier:
        # If an exception was raised, get the default account(empty)
        logging.error(identifier)

    account = account if account else "default"

    return account


def get_category_from_raw_entry(raw_splitted):
    category = str("Other")
    try:  # Try to access the index
        category = str(raw_splitted[4].strip())
    except Exception as identifier:
        # If an exception was raised, get the default category(empty)
        logging.error(identifier)

    category = category if category else "Other"

    return category


def add_entry(entry, record_file_path):
    logging.info("Inserting {} entry to {} file".format(
        entry, record_file_path))
    with open(record_file_path, 'a') as record_file:
        record_file.write(entry)
        record_file.write('\n')


def parse_entry_by_arguments(type, value, description, date, account, category):
    return LINE_ENTRY.format(
        type,
        value,
        description,
        get_date(date),
        account,
        category if category != None else "Other"
    )


def pase_raw_entry(type, raw_entry):
    splited_raw_entry = raw_entry.split(";")
    return LINE_ENTRY.format(
        type,
        get_value_from_raw_entry(splited_raw_entry),
        get_description_from_raw_entry(splited_raw_entry),
        get_date_from_raw_entry(splited_raw_entry),
        get_account_from_raw_entry(splited_raw_entry),
        get_category_from_raw_entry(splited_raw_entry),
    )

def month_report():
    now = datetime.datetime.now()
    year = now.year
    month = now.month
    report = float()

    record_file_path = os.path.join(
        PYCASH_CONFIG['file_path'],
        str(year),
        '{}_{}.csv'.format(month, str(now.strftime("%B")).lower()))
    try:
        with open(record_file_path) as record_file:
            reader = list(csv.reader(record_file))
            reader.pop(0)
            for row in reader:
                row = str(row[0]).split(';')
                if row[0].strip() == 'incoming':
                    report+=float(row[1].strip())
                else:
                    report-=float(row[1].strip())
        
        print("Month report: {} {}".format(PYCASH_CONFIG['currency'], report) )
    except Exception as identifier:
        logging.error("Error: {}".format(identifier))


def cli_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('-in', '--incoming', dest='type', action='store_const',
                        const='incoming', required=False)
    parser.add_argument('-out', '--outcoming', dest='type', action='store_const',
                        const='outcoming', required=False)
    parser.add_argument('--init', required=False, help="init")
    parser.add_argument('-r', '--raw', required=False, help="raw")
    parser.add_argument('--value', required=False, help="value")
    parser.add_argument('--date', required=False, help="date")
    parser.add_argument('--account', required=False, help="account")
    parser.add_argument('--category', required=False, help="category")
    parser.add_argument('--file', required=False, help="file")
    parser.add_argument('-desc', '--description',
                        required=False, help="description")
    args = parser.parse_args()
    update_config()
    if args.type:
        if args.raw:
            add_entry(
                pase_raw_entry(args.type, args.raw),
                get_file(args.file)
            )
        else:
            if not args.value:
                return -1
            add_entry(
                parse_entry_by_arguments(
                    args.type,
                    args.value,
                    args.description if args.description != None else "",
                    get_date(args.date),
                    args.account if args.account != None else "",
                    args.category if args.category != None else "Other"
                ),
                get_file(args.file)
            )
    else:
        parser.print_help()
        parser.exit()

def main():
    cli_arguments()


if __name__ == "__main__":
    logging.basicConfig(
        filename=os.path.join('/tmp', 'pycash.log'),
        level=logging.DEBUG,
        format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %H:%M:%S'
    )
    main()
